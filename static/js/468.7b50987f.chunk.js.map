{"version":3,"file":"static/js/468.7b50987f.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/TitlePage/title-page.module.css?6643","components/TitlePage/TitlePage.jsx","function/formatData.js","webpack://react-homework-template/./src/pages/Exercises.module.css?a48d","components/exercise/ExerciseHead.js","components/exercise/ExerciseCategoriesItem.js","components/exercise/ExerciseCategoriesList.js","webpack://react-homework-template/./src/components/exercise/ExerciseList/ExerciseList.module.css?13ad","components/exercise/ExerciseList/ExerciseItem.js","components/exercise/ExerciseList/ExerciseList.js","webpack://react-homework-template/./src/components/exercise/Modal/style.module.css?7b13","components/exercise/Modal/ModalStat.js","components/exercise/Modal/ExerciseModal.js","pages/Exercises.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"titlePage\":\"title-page_titlePage__ZBar5\"};","import css from \"./title-page.module.css\";\n const TitlePage=({children})=>{\nreturn(\n    <h2 className={css.titlePage}>{children}</h2>\n)\n}\nexport default TitlePage;","const formatDate = (date) => {\n  const day = String(date.getDate()).padStart(2, '0');\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const year = date.getFullYear();\n  return `${year}-${month}-${day}`;\n};\n\n\nexport default formatDate;\n  \n\n","// extracted by mini-css-extract-plugin\nexport default {\"exerciseCategoryContainer\":\"Exercises_exerciseCategoryContainer__cXTxL\",\"activeCat\":\"Exercises_activeCat__C0nC+\",\"cat\":\"Exercises_cat__15D9M\",\"arrCont\":\"Exercises_arrCont__gAKAe\",\"arrElCont\":\"Exercises_arrElCont__YWwZx\"};","import React from 'react';\nimport TitlePage from 'components/TitlePage/TitlePage';\n\nimport css from '../../pages/Exercises.module.css';\n\nfunction ExerciseHead({exCat, setExCat}) {\n    const handleChangeCat=(e)=>{\n        setExCat(e.target.innerText.trim())\n    }\n    return (\n        <div>\n             <TitlePage children={\"Exercises\"}/>\n            <div className={css.exerciseCategoryContainer}>\n                <div onClick={handleChangeCat} className={exCat===\"Body parts\" ? css.activeCat:css.cat}>Body parts</div>\n                <div onClick={handleChangeCat} className={exCat===\"Muscles\" ? css.activeCat:css.cat}>Muscles</div>\n                <div onClick={handleChangeCat} className={exCat===\"Equipment\" ? css.activeCat:css.cat}>Equipment</div>\n            </div>\n        </div>\n    );\n}\n\nexport default ExerciseHead;","import React from 'react';\n\nimport css from '../../pages/Exercises.module.css';\n\nfunction ExerciseCategoriesItem({ item, setSpec }) {\n  return (\n    <div\n      className={css.arrElCont}\n      onClick={e => {\n        setSpec(item);\n      }}\n    >\n      <img src={item.imgURL} alt=\"exercise_image\" />\n      <div className={css.arrElContText}>\n        <h2>{item.name.toUpperCase()[0] + item.name.substring(1)}</h2>\n        <br />\n        <p>{item.filter}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default ExerciseCategoriesItem;\n","import React from 'react';\nimport { nanoid } from '@reduxjs/toolkit';\n\nimport css from '../../pages/Exercises.module.css';\nimport ExerciseCategoriesItem from './ExerciseCategoriesItem';\nfunction ExerciseCategoriesList({ arr, setSpec }) {\n  try{\n    return (\n      <div className={css.arrCont}>\n        {arr.map(v => (\n          <ExerciseCategoriesItem item={v} key={nanoid()} setSpec={setSpec}/>\n        ))}\n      </div>\n    );\n  }catch{\n    return <></>\n  }\n\n}\n\nexport default ExerciseCategoriesList;\n","// extracted by mini-css-extract-plugin\nexport default {\"exerciseListContainer\":\"ExerciseList_exerciseListContainer__FqpZ6\",\"exerciseItemContainer\":\"ExerciseList_exerciseItemContainer__UUNG7\",\"startBtn\":\"ExerciseList_startBtn__lc1HN\",\"exerciseStatsContainer\":\"ExerciseList_exerciseStatsContainer__-H-FZ\"};","import React from 'react';\n\nimport svg from 'img/sprite/symbol-defs.svg';\nimport css from './ExerciseList.module.css';\n\nfunction ExerciseItem({ exercise, setSelected }) {\n  const capitalize = str => (str ? str[0].toUpperCase() + str.slice(1) : '');\n  return (\n    <div className={css.exerciseItemContainer}>\n      <h3>\n        <svg className={css.svgTitle}>\n          <use href={`${svg}#icon-runningMan`}></use>\n        </svg>\n        {capitalize(exercise.name)}\n      </h3>\n      <div className={css.exerciseStatsContainer}>\n        <p>\n          Burned calories <span>{exercise.burnedCalories}</span>\n        </p>\n        <p>\n          Body part <span>{capitalize(exercise.bodyPart)}</span>\n        </p>\n        <p>\n          Target <span>{capitalize(exercise.target)}</span>\n        </p>\n      \n      </div>\n      <button className={css.startBtn} onClick={() => setSelected(exercise)}>\n        Start\n        <svg>\n          <use href={`${svg}#icon-next-arrow`}></use>\n        </svg>\n      </button>\n    </div>\n  );\n}\n\nexport default ExerciseItem;\n","import React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport instance from 'instance/instance';\nimport ExerciseItem from './ExerciseItem';\nimport { nanoid } from '@reduxjs/toolkit';\n\nimport css from './ExerciseList.module.css';\n\nfunction ExerciseList({ name, filter, setSelected }) {\n  const [arr, setArr] = useState([]);\n  useEffect(() => {\n    if (filter && name) {\n      instance.get(`exercises/filter?category=${filter}&specific=${name}&page=1$perPage=8`).then(v => {\n        setArr(v.data.result);\n      });\n    }\n  }, [setArr, name, filter]);\n\n  return (\n    <div className={css.exerciseListContainer}>\n      {arr.map(v => (\n        <ExerciseItem key={nanoid()} exercise={v} setSelected={setSelected}/>\n      ))}\n    </div>\n  );\n}\n\nexport default ExerciseList;\n","// extracted by mini-css-extract-plugin\nexport default {\"backdrop\":\"style_backdrop__KO3p2\",\"modalContainer\":\"style_modalContainer__yQozi\",\"modalAnimation\":\"style_modalAnimation__VL0eW\",\"modalTime\":\"style_modalTime__seuca\",\"time\":\"style_time__5dkMr\",\"pauseSvg\":\"style_pauseSvg__tsFB1\",\"pauseBtn\":\"style_pauseBtn__URUfM\",\"progressBar\":\"style_progressBar__H8dZJ\",\"dotContainer\":\"style_dotContainer__BFghM\",\"spin\":\"style_spin__-qfD6\",\"dot\":\"style_dot__eKUiR\",\"exerciseChars\":\"style_exerciseChars__0hZob\",\"modalStat\":\"style_modalStat__Ochir\",\"focus\":\"style_focus__K8-BB\",\"addBtn\":\"style_addBtn__1eZzl\"};","import React from 'react';\nimport css from './style.module.css';\n\n\nfunction ModalStat({ name, val }) {\n  return (\n    <div className={css.modalStat}>\n      {name}\n      <p>{(val.toUpperCase()[0]+val.slice(1))}</p>\n    </div>\n  );\n}\n\nexport default ModalStat;\n","import React, { useEffect, useState } from 'react';\nimport css from './style.module.css';\nimport svg from '../../../img/sprite/symbol-defs.svg';\nimport ModalStat from './ModalStat';\nimport { useDispatch } from 'react-redux';\nimport { addExercisesDiary } from '../../../redux/diary/diaryOperations';\nimport formatDate from 'function/formatData';\n\nfunction ExerciseModal({ ex }) {\n  const [seconds, setSeconds] = useState(0);\n  const [paused, setPaused] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [finished, setFinished] = useState(false);\n  const dispatch = useDispatch();\n  \n  const percentTimeLeft = (1 - seconds / (ex.time * 60)) * 100;\n  const caloriesBurned = ((ex.burnedCalories * percentTimeLeft) / 100).toFixed(2);\n  useEffect(() => {\n    if (ex) {\n      setOpen(true);\n      setSeconds(ex.time * 60);\n      setFinished(false);\n    }\n  }, [ex]);\n  useEffect(()=>{\n    if(finished){\n      const data={\n        id:ex._id,\n        duration:(seconds / 60).toFixed(2),\n        burnedCalories: caloriesBurned,\n        date: formatDate(new Date())\n      }\n      dispatch(addExercisesDiary(data))\n    }\n  }, [finished, ex, seconds, caloriesBurned, dispatch])\n  useEffect(() => {\n    if (seconds <= 0) {\n      setFinished(true);\n    } else if (!paused && !finished) {\n      setTimeout(() => {\n        setSeconds(seconds - 1);\n      }, 1000);\n    }\n  }, [seconds, paused, finished]);\n\n  const closeModal = e => {\n    if (e.target.id === 'close') {\n      ex = undefined;\n      setOpen(false);\n    }\n  };\n  const convertTime = sec => {\n    const min = Math.floor(sec / 60);\n    sec = sec % 60;\n    if (sec < 10) {\n      sec = '0' + sec;\n    }\n    if (min < 10) {\n      return '0' + min + ':' + sec;\n    }\n    return min + ':' + sec;\n  };\n\n  if (open) {\n    if (!finished) {\n      return (\n        <div className={css.backdrop} onClick={closeModal} id=\"close\">\n          <div className={css.modalContainer}>\n            <img\n              className={css.modalAnimation}\n              alt=\"exercise tutorial\"\n              src={ex.gifUrl}\n            />\n            <div className={css.modalTime}>\n              <p>Time</p>\n              <div\n                className={css.progressBar}\n                style={{\n                  background: `radial-gradient(closest-side, #10100f 90%, transparent 90% 100%), conic-gradient(var( --decorate-color) ${percentTimeLeft}%, transparent ${percentTimeLeft}%)`,\n                }}\n              >\n                <div\n                  className={css.dotContainer}\n                  style={{ animationPlayState: paused ? 'paused' : 'running' }}\n                >\n                  <div className={css.dot} />\n                </div>\n                <div className={css.time}>{convertTime(seconds)}</div>\n              </div>\n\n              <button\n                className={css.pauseBtn}\n                onClick={() => setPaused(!paused)}\n              >\n                <svg className={css.pauseSvg}>\n                  {paused ? (\n                    <use href={`${svg}#icon-play-square`} />\n                  ) : (\n                    <use href={`${svg}#icon-pause-square`} />\n                  )}\n                </svg>\n              </button>\n              <p>\n                Burned calories:{' '}\n                <span className={css.focus}>{caloriesBurned}</span>\n              </p>\n              <div className={css.exerciseChars}>\n                <ModalStat name={'Name'} val={ex.name} />\n                <ModalStat name={'Target'} val={ex.target} />\n                <ModalStat name={'Body Part'} val={ex.bodyPart} />\n                <ModalStat name={'Equipment'} val={ex.equipment} />\n              </div>\n            </div>\n            <button\n              className={css.addBtn}\n              onClick={() => {\n                setFinished(true);\n              }}\n            >\n              Add to diary\n            </button>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className={css.backdrop} onClick={closeModal} id=\"close\">\n          <div className={css.modalContainer}>\n            <img className={css.thumb} alt=\"dls\" />\n            <p>\n              Your time:{' '}\n              <span className={css.focus}>\n                {(seconds / 60).toFixed(2)} minutes\n              </span>\n            </p>\n            <p>\n              Burned calories:{' '}\n              <span className={css.focus}>{caloriesBurned}</span>\n            </p>\n          </div>\n        </div>\n      );\n    }\n  }\n  return <></>;\n}\n\nexport default ExerciseModal;\n","import React, { useEffect, useState } from 'react';\nimport ExerciseHead from '../components/exercise/ExerciseHead';\n\nimport instance from 'instance/instance';\nimport ExerciseCategoriesList from '../components/exercise/ExerciseCategoriesList';\nimport ExerciseList from '../components/exercise/ExerciseList/ExerciseList';\nimport ExerciseModal from 'components/exercise/Modal/ExerciseModal';\n\nfunction Exercises(props) {\n  const [exCat, setExCat] = useState('Body parts');\n  const [arr, setArr] = useState({ totalPages: 1, currentPage: 1, result: [] });\n  const [loading, setLoading] = useState(false);\n  const [selectedEx, setSelectedEx] = useState(undefined);\n\n  const [specific, setSpecific] = useState({\n    name: undefined,\n    filter: undefined,\n  });\n\n  useEffect(() => {\n    if (!specific.filter || !specific.name) {\n      setArr([]);\n      setLoading(true);\n      instance\n        .get('exercises?filter=' + exCat)\n        .then(v => {\n          setArr(v.data);\n        })\n        .finally(() => setLoading(false));\n    } else {\n      setArr([]);\n    }\n  }, [setArr, exCat, specific]);\n\n  if (!specific.name || !specific.filter) {\n    return (\n      <div>\n        <ExerciseHead exCat={exCat} setExCat={setExCat} />\n        {loading ? (\n          <div>Loading...</div>\n        ) : (\n          <ExerciseCategoriesList arr={arr.result} setSpec={setSpecific} />\n        )}\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <ExerciseHead exCat={exCat} setExCat={setExCat} />\n        <ExerciseList\n          name={specific.name}\n          filter={specific.filter}\n          setSelected={setSelectedEx}\n        />\n        {selectedEx ? <ExerciseModal ex={selectedEx} />:<></>}\n      </div>\n    );\n  }\n}\n\nexport default Exercises;\n"],"names":["_ref","children","_jsx","className","css","date","day","String","getDate","padStart","month","getMonth","year","getFullYear","concat","exCat","setExCat","handleChangeCat","e","target","innerText","trim","_jsxs","TitlePage","onClick","item","setSpec","src","imgURL","alt","name","toUpperCase","substring","filter","arr","map","v","ExerciseCategoriesItem","nanoid","_unused","_Fragment","exercise","setSelected","capitalize","str","slice","href","svg","burnedCalories","bodyPart","_useState","useState","_useState2","_slicedToArray","setArr","useEffect","instance","then","data","result","ExerciseItem","val","ex","seconds","setSeconds","_useState3","_useState4","paused","setPaused","_useState5","_useState6","open","setOpen","_useState7","_useState8","finished","setFinished","dispatch","useDispatch","percentTimeLeft","time","caloriesBurned","toFixed","id","_id","duration","formatDate","Date","addExercisesDiary","setTimeout","closeModal","undefined","gifUrl","style","background","animationPlayState","sec","min","Math","floor","convertTime","ModalStat","equipment","props","totalPages","currentPage","loading","setLoading","selectedEx","setSelectedEx","_useState9","_useState10","specific","setSpecific","finally","ExerciseHead","ExerciseList","ExerciseModal","ExerciseCategoriesList"],"sourceRoot":""}