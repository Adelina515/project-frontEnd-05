{"version":3,"file":"static/js/344.b52e8345.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/pages/Diary.module.css?de53","components/daySwitch/DaySwitch.js","components/dayDashboard/DayDashboard.js","webpack://react-homework-template/./src/components/dayProducts/DayProducts.module.css?7af7","webpack://react-homework-template/./src/components/dayProducts/productsTable/ProductsTable.module.css?5674","components/dayProducts/productsTable/ProductsTable.js","../node_modules/nanoid/index.browser.js","components/dayProducts/DayProducts.js","components/dayExercises/DayExercises.js","pages/Diary.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"diaryPage\":\"Diary_diaryPage__fAyYC\",\"calendarCont\":\"Diary_calendarCont__6mDiP\",\"calendar\":\"Diary_calendar__ESVay\",\"sectionCont\":\"Diary_sectionCont__+Xm4N\"};","//import css from './DaySwitch.module.css';\n\n\n\n\nconst DaySwitch = () => {\n  \n\n};\n\n\nexport default DaySwitch;\n","const DayDashboard = () => {\n  \n\n};\n\n\nexport default DayDashboard;\n","// extracted by mini-css-extract-plugin\nexport default {\"dayProducts\":\"DayProducts_dayProducts__LuDKI\",\"dayScroll\":\"DayProducts_dayScroll__46wb-\",\"diaryMen\":\"DayProducts_diaryMen__zlr12\",\"DiaryZag\":\"DayProducts_DiaryZag__rvcXM\"};","// extracted by mini-css-extract-plugin\nexport default {\"diaryItem\":\"ProductsTable_diaryItem__kGjga\",\"elem\":\"ProductsTable_elem__B1b3i\",\"elementCont\":\"ProductsTable_elementCont__-LBk0\",\"nameCateg\":\"ProductsTable_nameCateg__85BEo\",\"nameValue\":\"ProductsTable_nameValue__k2xLk\",\"element\":\"ProductsTable_element__MVHTf\",\"recommendCont\":\"ProductsTable_recommendCont__kGpWW\",\"productRecommend\":\"ProductsTable_productRecommend__W3G-g\",\"productNotRecommend\":\"ProductsTable_productNotRecommend__6WQMJ\",\"trashValue\":\"ProductsTable_trashValue__0fzSq\",\"nameTrash\":\"ProductsTable_nameTrash__jBGkn\"};","import css from './ProductsTable.module.css';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\n\n\n\nconst ProductsTable = (props) => {\n      const { products } = props; // Отримуємо products з props\n\n    const capitalizedWord = (word) => {\n  return word.substring(0, 1).toUpperCase() + word.substring(1);\n};\n    return (\n       <ul className={css.diaryList}>\n      {products.map(\n        ({ _id, title, category, calories, amount, recommended }, i) => {\n          return (\n            <li key={nanoid()} className={css.diaryItem}>\n              <table className={css.table}>\n                <tbody className={css.bodyTable}>\n                  <tr className={css.elem}>\n                    <th className={css.nameCateg}>Title</th>\n                    <td className={css.nameValue}>{capitalizedWord(title)}</td>\n                  </tr>\n                  <tr className={css.elem}>\n                    <th className={css.nameCateg}>Category</th>\n                    <td className={css.nameValue}>\n                      {capitalizedWord(category)}\n                    </td>\n                  </tr>\n                </tbody>\n                <tbody className={css.elementCont}>\n                  <tr className={css.elem}>\n                    <th className={css.nameCateg}>Calories</th>\n                    <td className={css.nameValue}>{calories}</td>\n                  </tr>\n                  <tr className={css.elem}>\n                    <th className={css.nameCateg}>Weight</th>\n                    <td className={css.nameValue}>{amount}</td>\n                  </tr>\n                  <tr className={css.elem}>\n                    <th className={css.nameCateg}>Recommend</th>\n                    <td className={css.nameValue}>\n                      <div className={`${css.recommendCont}`}>\n                        <span\n                          className={\n                            recommended\n                              ? `${css.productRecommend}`\n                              : `${css.productNotRecommend}`\n                          }\n                        ></span>\n                        {recommended ? 'Yes' : 'No'}\n                      </div>\n                    </td>\n                  </tr>\n                  <tr className={css.elem}>\n                    <th className={`${css.nameCateg} ${css.nameTrash}`}>\n                      Trash\n                    </th>\n                    <td>Кошик</td>\n                  </tr>\n                </tbody>\n              </table>\n            </li>\n          );\n        }\n      )}\n    </ul>\n  );\n\n}\n\nProductsTable.propTypes = {\n  products: PropTypes.array.isRequired,\n};\n\nexport default ProductsTable;\n\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import css from './DayProducts.module.css';\nimport ProductsTable from './productsTable/ProductsTable';\n//import EmptyList from '';\n\n\nconst DayProducts = () => {\n      const diaryProducts = [\n    {\n      _id: '1',\n      title: 'Product 1',\n      category: 'Category 1',\n      calories: 100,\n      amount: 200,\n      recommended: true,\n    },]\n    return (\n        <div className = {css.dayProducts}>\n            <div className = {css.dayScroll}>\n                <div className={ css.diaryMen}> \n                    <h3 className = {css.DiaryZag}>Products</h3>\n                    <button>Add products</button>\n                </div>\n            \n               <ProductsTable products={diaryProducts}/>\n            </div>\n\n        </div> \n)\n}\n\nexport default DayProducts;\n\n","//import css from \"./DayExercises.module.css\";\n\n//import ExercisesTable from \"../ExercisesTable/ExercisesTable\";\n//import EmptyList from \"../EmptyList/EmptyList\";\n\nconst DayExercises = () => {\n\n  return (\n    <>\n      <div>\n        <div>\n          <div>\n            <h3>Execrcises</h3>\n          </div>\n                  {//diaryExercises.length === 0 ? (<EmptyList listName={\"exercises\"} />) : (<ExercisesTable exercises={diaryExercises} />)\n                  }\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DayExercises;\n","import css from './Diary.module.css';\n\n//import TitlePage from '../components/titlePage/TitlePage';\nimport DaySwitch from '../components/daySwitch/DaySwitch';\nimport DayDashboard from '../components/dayDashboard/DayDashboard';\nimport DayProducts from '../components/dayProducts/DayProducts';\nimport DayExercises from '../components/dayExercises/DayExercises';\n\n\nexport default function Diary() {\n\n    return (\n        <div className ={css.diaryPage}>\n            <div className ={css.calendarCont}>\n                <div className ={css.calendar}>\n                    <DaySwitch />\n                </div>\n            </div>\n            <div className ={css.sectionCont}>\n                <DayDashboard />\n                <div>\n                    <DayProducts />\n                    <DayExercises />\n                </div>\n            </div>\n\n        </div>\n    )\n}\n"],"names":["props","products","capitalizedWord","word","substring","toUpperCase","_jsx","className","css","children","map","_ref","i","_id","title","category","calories","amount","recommended","_jsxs","concat","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","nanoid","ProductsTable","_Fragment","Diary","DaySwitch","DayDashboard","DayProducts","DayExercises"],"sourceRoot":""}