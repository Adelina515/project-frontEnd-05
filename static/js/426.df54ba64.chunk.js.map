{"version":3,"file":"static/js/426.df54ba64.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/TitlePage/title-page.module.css?6643","components/TitlePage/TitlePage.jsx","webpack://react-homework-template/./src/pages/Diary.module.css?de53","components/daySwitch/DaySwitch.js","components/dayDashboard/DayDashboard.js","webpack://react-homework-template/./src/components/dayProducts/DayProducts.module.css?7af7","webpack://react-homework-template/./src/components/dayProducts/productsTable/ProductsTable.module.css?5674","../node_modules/nanoid/index.browser.js","components/dayProducts/productsTable/ProductsTable.js","components/dayProducts/DayProducts.js","webpack://react-homework-template/./src/components/dayExercises/DayExercises.module.css?3b92","webpack://react-homework-template/./src/components/dayExercises/exercisesTable/ExercisesTable.module.css?d836","components/dayExercises/exercisesTable/ExercisesTable.js","components/dayExercises/DayExercises.js","pages/Diary.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"titlePage\":\"title-page_titlePage__ZBar5\"};","import css from \"./title-page.module.css\";\n const TitlePage=({children})=>{\nreturn(\n    <h2 className={css.titlePage}>{children}</h2>\n)\n}\nexport default TitlePage;","// extracted by mini-css-extract-plugin\nexport default {\"diaryPage\":\"Diary_diaryPage__fAyYC\",\"calendarCont\":\"Diary_calendarCont__6mDiP\",\"calendar\":\"Diary_calendar__ESVay\",\"sectionCont\":\"Diary_sectionCont__+Xm4N\"};","//import css from './DaySwitch.module.css';\n\n\n\n\nconst DaySwitch = () => {\n  \n\n};\n\n\nexport default DaySwitch;\n","const DayDashboard = () => {\n  \n\n};\n\n\nexport default DayDashboard;\n","// extracted by mini-css-extract-plugin\nexport default {\"dayProducts\":\"DayProducts_dayProducts__LuDKI\",\"dayScroll\":\"DayProducts_dayScroll__46wb-\",\"diaryMen\":\"DayProducts_diaryMen__zlr12\",\"DiaryZag\":\"DayProducts_DiaryZag__rvcXM\",\"Butt\":\"DayProducts_Butt__NdM-k\",\"iconStrilka\":\"DayProducts_iconStrilka__Ilypr\"};","// extracted by mini-css-extract-plugin\nexport default {\"diaryList\":\"ProductsTable_diaryList__NSGJb\",\"diaryItem\":\"ProductsTable_diaryItem__kGjga\",\"elem\":\"ProductsTable_elem__B1b3i\",\"elementCont\":\"ProductsTable_elementCont__-LBk0\",\"nameCateg\":\"ProductsTable_nameCateg__85BEo\",\"nameValue\":\"ProductsTable_nameValue__k2xLk\",\"element\":\"ProductsTable_element__MVHTf\",\"recommendCont\":\"ProductsTable_recommendCont__kGpWW\",\"productRecommend\":\"ProductsTable_productRecommend__W3G-g\",\"productNotRecommend\":\"ProductsTable_productNotRecommend__6WQMJ\",\"trashValue\":\"ProductsTable_trashValue__0fzSq\",\"iconTresh\":\"ProductsTable_iconTresh__beqBw\",\"nameTrash\":\"ProductsTable_nameTrash__jBGkn\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import css from './ProductsTable.module.css';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport sprite from '../../../img/sprite/symbol-defs.svg';\n\n\nconst ProductsTable = (props) => {\n      const { products } = props; // Отримуємо products з props\n\n    const capitalizedWord = (word) => {\n  return word.substring(0, 1).toUpperCase() + word.substring(1);\n};\n    return (\n       <ul className={css.diaryList}>\n      {products.map(\n        ({ _id, title, category, calories, amount, recommended }, i) => {\n          return (\n            <li key={nanoid()} className={css.diaryItem}>\n              <table className={css.table}>\n                <tbody className={css.bodyTable}>\n                  <tr className={css.elem}>\n                    <th className={css.nameCateg}>Title</th>\n                    <td className={css.nameValue}>{capitalizedWord(title)}</td>\n                  </tr>\n                  <tr className={css.elem}>\n                    <th className={css.nameCateg}>Category</th>\n                    <td className={css.nameValue}>\n                      {capitalizedWord(category)}\n                    </td>\n                  </tr>\n                </tbody>\n                <tbody className={css.elementCont}>\n                  <tr className={css.elem}>\n                    <th className={css.nameCateg}>Calories</th>\n                    <td className={css.nameValue}>{calories}</td>\n                  </tr>\n                  <tr className={css.elem}>\n                    <th className={css.nameCateg}>Weight</th>\n                    <td className={css.nameValue}>{amount}</td>\n                  </tr>\n                  <tr className={css.elem}>\n                    <th className={css.nameCateg}>Recommend</th>\n                    <td className={css.nameValue}>\n                      <div className={`${css.recommendCont}`}>\n                        <span\n                          className={\n                            recommended\n                              ? `${css.productRecommend}`\n                              : `${css.productNotRecommend}`\n                          }\n                        ></span>\n                        {recommended ? 'Yes' : 'No'}\n                      </div>\n                    </td>\n                  </tr>\n                  <tr className={css.elem}>\n                    <th className={`${css.nameCateg} ${css.nameTrash}`}>\n                      Trash\n                    </th>\n                    <td> \n                      <svg className={css.iconTresh} width=\"98px\" height=\"35px\">\n                        <use href={`${sprite}#icon-trash`}></use>\n                      </svg>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </li>\n          );\n        }\n      )}\n    </ul>\n  );\n\n}\n\nProductsTable.propTypes = {\n  products: PropTypes.array.isRequired,\n};\n\nexport default ProductsTable;\n","import css from './DayProducts.module.css';\nimport ProductsTable from './productsTable/ProductsTable';\nimport sprite from '../../img/sprite/symbol-defs.svg';\nimport { Link } from 'react-router-dom';\n\n//import EmptyList from '';\n\nconst DayProducts = () => {\n      const diaryProducts = [\n    {\n      _id: '1',\n      title: 'Product 1',\n      category: 'Category 1',\n      calories: 100,\n      amount: 200,\n      recommended: true,\n    },]\n    return (\n        <div className = {css.dayProducts}>\n            <div className = {css.dayScroll}>\n                <div className={ css.diaryMen}> \n                    <h3 className = {css.DiaryZag}>Products</h3>\n                    <Link to=\"/products\" className={css.Butt}>\n            Add product\n            <svg className={css.iconStrilka} width=\"98px\" height=\"35px\">\n              <use href={`${sprite}#icon-next-arrow-gray`}></use>\n            </svg>\n          </Link>\n                </div>\n            \n               <ProductsTable products={diaryProducts}/>\n            </div>\n\n        </div> \n)\n}\n\nexport default DayProducts;\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"DayExercises\":\"DayExercises_DayExercises__d2We8\",\"dayScroll\":\"DayExercises_dayScroll__gcQVi\",\"dayNav\":\"DayExercises_dayNav__+T+Wl\",\"dayZag\":\"DayExercises_dayZag__iZ6rT\",\"Butt\":\"DayExercises_Butt__3osLG\",\"iconStrilka\":\"DayExercises_iconStrilka__4vViE\"};","// extracted by mini-css-extract-plugin\nexport default {\"diaryMainItem\":\"ExercisesTable_diaryMainItem__+QUNa\",\"element\":\"ExercisesTable_element__ciKJY\",\"elementWrap\":\"ExercisesTable_elementWrap__7MPXh\",\"nameCategory\":\"ExercisesTable_nameCategory__5Wc+t\",\"nameValue\":\"ExercisesTable_nameValue__iih7Y\",\"iconTresh\":\"ExercisesTable_iconTresh__DePOM\",\"nameTrash\":\"ExercisesTable_nameTrash__xfZsB\",\"table\":\"ExercisesTable_table__vvyBI\",\"bodyTable\":\"ExercisesTable_bodyTable__EcdoH\",\"diaryMainList\":\"ExercisesTable_diaryMainList__+2ofD\"};","import css from './ExercisesTable.module.css';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport sprite from '../../../img/sprite/symbol-defs.svg';\n\nconst ExercisesTable = (props) => {\n    const { exercises } = props;\n    const capitalizedWord = (word) => {\n  return word.substring(0, 1).toUpperCase() + word.substring(1);\n};\n    return (\n         <>\n      <ul className={css.diaryMainList}>\n        {exercises.map(\n          ({ _id, bodyPart, equipment, name, target, calories, time }) => (\n            <li key={nanoid()} className={css.diaryMainItem}>\n              <table className={css.table}>\n                <tbody className={css.bodyTable}>\n                  <tr className={css.element}>\n                    <th className={css.nameCategory}>Body Part</th>\n                    <td className={css.nameValue}>\n                      {capitalizedWord(bodyPart)}\n                    </td>\n                  </tr>\n                  <tr className={css.element}>\n                    <th className={css.nameCategory}>Equipment</th>\n                    <td className={css.nameValue}>\n                      {capitalizedWord(equipment)}\n                    </td>\n                  </tr>\n                  <tr className={css.element}>\n                    <th className={css.nameCategory}>Name</th>\n                    <td className={css.nameValue}>{capitalizedWord(name)}</td>\n                  </tr>\n                </tbody>\n                <tbody className={css.elementWrap}>\n                  <tr className={css.element}>\n                    <th className={css.nameCategory}>Target</th>\n                    <td className={css.nameValue}>{capitalizedWord(target)}</td>\n                  </tr>\n                  <tr className={css.element}>\n                    <th className={css.nameCategory}>Burned Calories</th>\n                    <td className={css.nameValue}>{calories}</td>\n                  </tr>\n                  <tr className={css.element}>\n                    <th className={css.nameCategory}>Time</th>\n                    <td className={css.nameValue}>{time}</td>\n                  </tr>\n                  <tr className={css.element}>\n                    <th className={`${css.nameCategory} ${css.nameTrash}`}>\n                      Trash\n                    </th>\n                    <td> \n                      <svg className={css.iconTresh} width=\"98px\" height=\"35px\">\n                        <use href={`${sprite}#icon-trash`}></use>\n                      </svg>\n                  </td>\n                  </tr>\n                </tbody>\n              </table>\n            </li>\n          )\n        )}\n      </ul>\n    </>\n    )\n    \n}\n\nExercisesTable.propTypes = {\n  exercises: PropTypes.array.isRequired,\n};\n\n\n\nexport default ExercisesTable;\n\n\n","import css from \"./DayExercises.module.css\";\nimport { Link } from 'react-router-dom';\n\nimport ExercisesTable from \"./exercisesTable/ExercisesTable\";\n\nimport sprite from '../../img/sprite/symbol-defs.svg'\n\n//import EmptyList from \"../EmptyList/EmptyList\";\n\nconst DayExercises = () => {\nconst diaryExercises = [\n  {\n    _id: 1,\n    bodyPart: 'legs',\n    equipment: 'dumbbells',\n    name: 'squats',\n    target: 'strength',\n    calories: 200,\n    time: '15 minutes'\n  },\n];\n  return (\n    <>\n      <div className= {css.DayExercises}>\n        <div className ={css.dayScroll}>\n          <div className={css.dayNav}>\n            <h3 className={css.dayZag}>Execrcises</h3>\n         <Link to=\"/exercises\" className={css.Butt}>\n            Add exercises\n            <svg className={css.iconStrilka} width=\"98px\" height=\"35px\">\n              <use href={`${sprite}#icon-next-arrow-gray`}></use>\n            </svg>\n          </Link>\n          </div>\n                 <ExercisesTable exercises={diaryExercises} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DayExercises;\n\n","import css from './Diary.module.css';\n\nimport TitlePage from '../components/TitlePage/TitlePage';\nimport DaySwitch from '../components/daySwitch/DaySwitch';\nimport DayDashboard from '../components/dayDashboard/DayDashboard';\nimport DayProducts from '../components/dayProducts/DayProducts';\nimport DayExercises from '../components/dayExercises/DayExercises';\n\n//import { fetchAllDiary } from \"../redux/diary/diaryOperations\";\n\n\n//import { useDispatch } from \"react-redux\";\nimport { /*useEffect,*/ useState } from \"react\";\n\n\n\nexport default function Diary() {\n\n     //const dispatch = useDispatch();\n    const [/*selectedDate,*/ setSelectedDate] = useState(null);/*початкова дата не обрана*/\n    /*Данні щоденника мають змінюватись при змінні  selectedDate*/\n     /*useEffect(() => {\n    const fetchDate = () => {\n      if (selectedDate) {\n        const date = {\n          date: selectedDate,\n        };\n        dispatch(fetchAllDiary(date));\n      }\n    };\n    fetchDate();\n  }, [dispatch, selectedDate]);*/\n\n\n\n/*для форматування дати, переданої як аргумент, у рядок у форматі \"рік-місяць-день\" */\n  const formatDate = (date) => {\n  const day = String(date.getDate()).padStart(2, '0');\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const year = date.getFullYear();\n  return `${year}-${month}-${day}`;\n  };\n/*Обробка вибраної дати */\n   const handleDate = async (date) => {\n    const formatedDate = formatDate(date);\n    await setSelectedDate(formatedDate);\n  };\n  \n\n    return (\n        <div className ={css.diaryPage}>\n            <div className={css.calendarCont}>\n                    <TitlePage title=\"Diary\" />\n\n                <div className ={css.calendar}>\n                    <DaySwitch handleDate={handleDate}/>\n                </div>\n            </div>\n            <div className ={css.sectionCont}>\n                <DayDashboard />\n                <div>\n                    <DayProducts />\n                    <DayExercises />\n                </div>\n            </div>\n\n        </div>\n    )\n}\n"],"names":["_ref","children","_jsx","className","css","nanoid","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","props","products","capitalizedWord","word","substring","map","i","_id","title","category","calories","amount","recommended","_jsxs","concat","width","height","href","sprite","Link","to","ProductsTable","exercises","_Fragment","bodyPart","equipment","name","target","time","ExercisesTable","Diary","_useState","useState","setSelectedDate","_slicedToArray","formatDate","date","day","String","getDate","padStart","month","getMonth","year","getFullYear","handleDate","_asyncToGenerator","_regeneratorRuntime","_callee","formatedDate","_context","prev","next","stop","_x","apply","TitlePage","DaySwitch","DayDashboard","DayProducts","DayExercises"],"sourceRoot":""}